// <auto-generated /> Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Bot.Connector.Teams.Models
{
    using System.Linq;

    /// <summary>
    /// Compose extension result
    /// </summary>
    public partial class ComposeExtensionResult
    {
        /// <summary>
        /// Initializes a new instance of the ComposeExtensionResult class.
        /// </summary>
        public ComposeExtensionResult() { }

        /// <summary>
        /// Initializes a new instance of the ComposeExtensionResult class.
        /// </summary>
        /// <param name="attachmentLayout">Hint for how to display multiple
        /// attachments.</param>
        /// <param name="type">The type of the result</param>
        /// <param name="attachments">(Only when type is result)
        /// Attachments</param>
        /// <param name="suggestedActions">(Only when type of auth or config)
        /// Suggested actions</param>
        /// <param name="text">(Only when type is message) Text</param>
        public ComposeExtensionResult(string attachmentLayout = default(string), string type = default(string), System.Collections.Generic.IList<ComposeExtensionAttachment> attachments = default(System.Collections.Generic.IList<ComposeExtensionAttachment>), ComposeExtensionSuggestedAction suggestedActions = default(ComposeExtensionSuggestedAction), string text = default(string))
        {
            AttachmentLayout = attachmentLayout;
            Type = type;
            Attachments = attachments;
            SuggestedActions = suggestedActions;
            Text = text;
        }

        /// <summary>
        /// Gets or sets hint for how to display multiple attachments.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "attachmentLayout")]
        public string AttachmentLayout { get; set; }

        /// <summary>
        /// Gets or sets the type of the result
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "type")]
        public string Type { get; set; }

        /// <summary>
        /// Gets or sets (Only when type is result) Attachments
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "attachments")]
        public System.Collections.Generic.IList<ComposeExtensionAttachment> Attachments { get; set; }

        /// <summary>
        /// Gets or sets (Only when type of auth or config) Suggested actions
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "suggestedActions")]
        public ComposeExtensionSuggestedAction SuggestedActions { get; set; }

        /// <summary>
        /// Gets or sets (Only when type is message) Text
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "text")]
        public string Text { get; set; }

    }
}
